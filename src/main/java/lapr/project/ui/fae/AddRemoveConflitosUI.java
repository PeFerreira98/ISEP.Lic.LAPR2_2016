/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr.project.ui.fae;

import java.awt.Component;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import lapr.project.controller.fae.ActualizarConflitosController;
import lapr.project.model.exhibitions.Conflito;
import lapr.project.model.exhibitions.TipoConflito;
import lapr.project.model.users.FAE;

/**
 *
 * @author zero_
 */
public class AddRemoveConflitosUI extends javax.swing.JFrame {

    private ActualizarConflitosController controller;
    
    /**
     * Creates new form AddRemoveConflitos
     */
    public AddRemoveConflitosUI(ActualizarConflitosController controller) {
        this.controller = controller;
        
        super.setTitle("Add Remove Conflitos");
        
        initComponents();
        inicializarListaConf();
        inicializarListaTipoConf();
        jLabelFAE.setText(controller.getFAELabel());
        jLabelCand.setText(controller.getCandidaturaLabel());
        
        super.setLocationRelativeTo(null);
        super.setVisible(true);
    }

    private void inicializarListaConf() {
        final List<Conflito> listaConflitos = this.controller.getListaConflitos();

        if (listaConflitos.isEmpty()) {
            this.jListConfl.setModel(new DefaultListModel<>());
            JOptionPane.showMessageDialog(this, "Não existem Conflitos");
        }

        DefaultListModel listModel = new DefaultListModel() {
            @Override
            public int getSize() {
                return listaConflitos.size();
            }

            @Override
            public Object getElementAt(int i) {
                return listaConflitos.get(i);
            }
        };

        this.jListConfl.setModel(listModel);
        this.jListConfl.setCellRenderer(new CellRendererConf());
    }

    private class CellRendererConf extends JLabel implements ListCellRenderer<Conflito> {

        public CellRendererConf() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends Conflito> list, Conflito conflito, int index, boolean isSelected, boolean cellHasFocus) {
            setText(conflito.toStringList());

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            return this;
        }

    }

    private void inicializarListaTipoConf() {
        final List<TipoConflito> listaTipoConflito = this.controller.getListaTiposConflito();

        if (listaTipoConflito.isEmpty()) {
            this.jListTiposConfl.setModel(new DefaultListModel<>());
            JOptionPane.showMessageDialog(this, "Não existem Candidaturas");
        }

        DefaultListModel listModel = new DefaultListModel() {
            @Override
            public int getSize() {
                return listaTipoConflito.size();
            }

            @Override
            public Object getElementAt(int i) {
                return listaTipoConflito.get(i);
            }
        };

        this.jListTiposConfl.setModel(listModel);
        this.jListTiposConfl.setCellRenderer(new CellRendererTipoConf());
    }

    private class CellRendererTipoConf extends JLabel implements ListCellRenderer<TipoConflito> {

        public CellRendererTipoConf() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends TipoConflito> list, TipoConflito tipoConflito, int index, boolean isSelected, boolean cellHasFocus) {
            setText(tipoConflito.getDescricao());

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            return this;
        }

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListConfl = new javax.swing.JList<>();
        jButtonRemoveConfl = new javax.swing.JButton();
        jButtonAddConfl = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelFAE = new javax.swing.JLabel();
        jLabelCand = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListTiposConfl = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Lista Conflitos");

        jScrollPane1.setViewportView(jListConfl);

        jButtonRemoveConfl.setText("Remover Conflito");
        jButtonRemoveConfl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveConflActionPerformed(evt);
            }
        });

        jButtonAddConfl.setText("Adicionar Conflito");
        jButtonAddConfl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddConflActionPerformed(evt);
            }
        });

        jLabel3.setText("Para: ");

        jLabelFAE.setText("fae");

        jLabelCand.setText("cand");

        jScrollPane2.setViewportView(jListTiposConfl);

        jLabel2.setText("Lista Tipos Conflito");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonRemoveConfl, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelFAE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelCand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButtonAddConfl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabelFAE)
                            .addComponent(jLabelCand))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRemoveConfl)
                    .addComponent(jButtonAddConfl))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRemoveConflActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveConflActionPerformed
        if (this.jListConfl.getSelectedIndex() != -1) {
            if (this.controller.eliminarConflito(this.jListConfl.getSelectedValue())) {
                JOptionPane.showMessageDialog(AddRemoveConflitosUI.this,
                    "Conflito Eliminado", "Add Remove Conflitos", JOptionPane.INFORMATION_MESSAGE);
                inicializarListaConf();
            } else{
                JOptionPane.showMessageDialog(AddRemoveConflitosUI.this,
                    "Erro ao eliminar conflito", "Add Remove Conflitos", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(AddRemoveConflitosUI.this,
                    "Select um Conflito", "Add Remove Conflitos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonRemoveConflActionPerformed

    private void jButtonAddConflActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddConflActionPerformed
        if (this.jListTiposConfl.getSelectedIndex() != -1) {
            if (this.controller.adicionaConflito(this.jListTiposConfl.getSelectedValue())) {
                JOptionPane.showMessageDialog(AddRemoveConflitosUI.this,
                    "Conflito criado", "Add Remove Conflitos", JOptionPane.INFORMATION_MESSAGE);
                inicializarListaConf();
            } else{
                JOptionPane.showMessageDialog(AddRemoveConflitosUI.this,
                    "Erro ao criar conflito", "Add Remove Conflitos", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(AddRemoveConflitosUI.this,
                    "Select um Tipo de Conflito", "Add Remove Conflitos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAddConflActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddConfl;
    private javax.swing.JButton jButtonRemoveConfl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelCand;
    private javax.swing.JLabel jLabelFAE;
    private javax.swing.JList<Conflito> jListConfl;
    private javax.swing.JList<TipoConflito> jListTiposConfl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
