/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lapr.project.ui.organizador;

import java.awt.Component;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import lapr.project.controller.organizador.AtribuirCandidaturaController;
import lapr.project.model.exhibitions.CentroExposicoes;
import lapr.project.model.exhibitions.Exposicao;
import lapr.project.model.mecanismos.MecanismoAtribuicao;

/**
 *
 * @author Sara Silva
 */
public class AtribuirCandidaturaUI extends javax.swing.JFrame {

    private AtribuirCandidaturaController controller;

    /**
     * Creates new form AtribuirCandidaturaUI
     */
    public AtribuirCandidaturaUI(CentroExposicoes centroExposicoes) {
        this.controller = new AtribuirCandidaturaController(centroExposicoes);

        super.setTitle("Atribuir Candidatura");
        initComponents();

        inicializarListaExposicao();
        inicializarListaMecanismos();
        super.setLocationRelativeTo(null);
        super.setVisible(true);
    }

    private void inicializarListaExposicao() {
        final List<Exposicao> listaExposicao = this.controller.getListaExposicoes();

        if (listaExposicao.isEmpty()) {
            this.jListExposicao.setModel(new DefaultListModel<>());
        }

        DefaultListModel listModel = new DefaultListModel() {
            @Override
            public int getSize() {
                return listaExposicao.size();
            }

            @Override
            public Object getElementAt(int i) {
                return listaExposicao.get(i);
            }
        };

        this.jListExposicao.setModel(listModel);
        this.jListExposicao.setCellRenderer(new CellRendererExposicao());
    }

    private void inicializarListaMecanismos() {
        final List<MecanismoAtribuicao> listaMecanismos = this.controller.getListaMecanismos();

        if (listaMecanismos.isEmpty()) {
            this.jListMecanismo.setModel(new DefaultListModel<>());
        }

        DefaultListModel listModel = new DefaultListModel() {
            @Override
            public int getSize() {
                return listaMecanismos.size();
            }

            @Override
            public Object getElementAt(int i) {
                return listaMecanismos.get(i);
            }
        };

        this.jListMecanismo.setModel(listModel);
        this.jListMecanismo.setCellRenderer(new CellRendererMecanismos());
    }

    private class CellRendererExposicao extends JLabel implements ListCellRenderer<Exposicao> {

        public CellRendererExposicao() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends Exposicao> list, Exposicao value, int index, boolean isSelected, boolean cellHasFocus) {
            setText(value.getTitle());

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            return this;
        }

    }

    private class CellRendererMecanismos extends JLabel implements ListCellRenderer<MecanismoAtribuicao> {

        public CellRendererMecanismos() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends MecanismoAtribuicao> list, MecanismoAtribuicao mecanismoAtribuicao, int index, boolean isSelected, boolean cellHasFocus) {
            setText(mecanismoAtribuicao.getDescricao());

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            return this;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListExposicao = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListMecanismo = new javax.swing.JList<>();
        jButtonAtribir = new javax.swing.JButton();
        jButtonDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(jListExposicao);

        jScrollPane2.setViewportView(jListMecanismo);

        jButtonAtribir.setText("Atribuir");
        jButtonAtribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtribirActionPerformed(evt);
            }
        });

        jButtonDone.setText("Done");
        jButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButtonAtribir, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButtonDone, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAtribir)
                    .addComponent(jButtonDone))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonDoneActionPerformed

    private void jButtonAtribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtribirActionPerformed
        if (this.jListExposicao.getSelectedValue() != null) {
            if (this.jListMecanismo.getSelectedValue() != null) {
                controller.setExposicao(this.jListExposicao.getSelectedValue());
                controller.setMecanismo(this.jListMecanismo.getSelectedValue());

                AtribuicaoTempListUI atribuicaoTempListUI = new AtribuicaoTempListUI(controller);
                atribuicaoTempListUI.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(AtribuirCandidaturaUI.this,
                        "Seleccione um mecanismo", "Atribuir Candidatura", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(AtribuirCandidaturaUI.this,
                    "Seleccione uma exposicao", "Atribuir Candidatura", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButtonAtribirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAtribir;
    private javax.swing.JButton jButtonDone;
    private javax.swing.JList<Exposicao> jListExposicao;
    private javax.swing.JList<MecanismoAtribuicao> jListMecanismo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
